
# The following tables have been generated by alchemify.py from the
# pypunctum utilities. For more information, see the documentation:
# https://punctum-im.github.io/pypunctum/alchemify

from sqlalchemy import Column, ForeignKey
from sqlalchemy import Integer, String, DateTime, Boolean, SmallInteger, Text
from sqlalchemy.orm import declarative_base
Base = declarative_base()


# Main object lookup table
class Objects(Base):
	__tablename__ = 'objects'

	id = Column(String(255), primary_key=True)
	object_type = Column(String(255), nullable=False)

# instance
class Instance(Base):
	__tablename__ = 'instance'

	id = Column('id', String(255), primary_key=True)
	address = Column(Text, nullable=False)
	server_software = Column(Text, nullable=False)
	name = Column(Text, nullable=False)
	description = Column(Text)

# account
class Account(Base):
	__tablename__ = 'account'

	id = Column('id', String(255), primary_key=True)
	username = Column(Text, nullable=False, unique=True)
	short_status = Column(Integer, nullable=False)
	status = Column(Text)
	bio = Column(Text)
	index_user = Column(Boolean, default = False)
	email = Column(Text)
	bot = Column(Boolean, default = False)
	bot_owner = Column(String(255), ForeignKey('account.id'))
	friends = Column(Text)
	blocklist = Column(Text)

# channel
class Channel(Base):
	__tablename__ = 'channel'

	id = Column('id', String(255), primary_key=True)
	name = Column(Text, nullable=False)
	permissions = Column(SmallInteger, nullable=False)
	channel_type = Column(Text, nullable=False)
	parent_conference = Column(String(255), ForeignKey('conference.id'))
	members = Column(Text)
	icon = Column(Text)
	description = Column(Text)

# message
class Message(Base):
	__tablename__ = 'message'

	id = Column('id', String(255), primary_key=True)
	content = Column(Text, nullable=False)
	parent_channel = Column(String(255), ForeignKey('channel.id'), nullable=False)
	author = Column(String(255), ForeignKey('account.id'), nullable=False)
	post_date = Column(Text, nullable=False)
	edit_date = Column(DateTime)
	edited = Column(Boolean, nullable=False, default = False)
	attached_files = Column(Text)
	reactions = Column(Text)
	reply_to = Column(String(255), ForeignKey('message.id'))
	replies = Column(Text)

# conference
class Conference(Base):
	__tablename__ = 'conference'

	id = Column('id', String(255), primary_key=True)
	name = Column(Text, nullable=False)
	description = Column(Text)
	icon = Column(Text, nullable=False)
	owner = Column(String(255), ForeignKey('account.id'), nullable=False)
	index_conference = Column(Boolean, default = False)
	permissions = Column(SmallInteger, nullable=False)
	creation_date = Column(Text, nullable=False)
	channels = Column(Text)
	users = Column(Text)
	roles = Column(Text)

# conference_member
class ConferenceMember(Base):
	__tablename__ = 'conference_member'

	id = Column('id', String(255), primary_key=True)
	user_id = Column(String(255), ForeignKey('account.id'), nullable=False)
	nickname = Column(Text)
	parent_conference = Column(String(255), ForeignKey('conference.id'), nullable=False)
	roles = Column(Text)
	permissions = Column(SmallInteger, nullable=False)
	banned = Column(Boolean, default = False)

# invite
class Invite(Base):
	__tablename__ = 'invite'

	id = Column('id', String(255), primary_key=True)
	name = Column(Text, nullable=False, unique=True)
	conference_id = Column(String(255), ForeignKey('conference.id'), nullable=False)
	creator = Column(String(255), ForeignKey('account.id'), nullable=False)

# role
class Role(Base):
	__tablename__ = 'role'

	id = Column('id', String(255), primary_key=True)
	name = Column(Text, nullable=False)
	permissions = Column(SmallInteger, nullable=False)
	color = Column(Text, nullable=False)
	description = Column(Text)
	parent_conference = Column(String(255), ForeignKey('conference.id'), nullable=False)

# report
class Report(Base):
	__tablename__ = 'report'

	id = Column('id', String(255), primary_key=True)
	target = Column(String(255), ForeignKey('objects.id'), nullable=False)
	note = Column(Text)


# Helper functions


def object_type_to_model(object_type):
	"""
	Takes an object_type string and returns the ORM model class for that
	object type.
	"""

	if object_type == 'instance':
		return Instance
	elif object_type == 'account':
		return Account
	elif object_type == 'channel':
		return Channel
	elif object_type == 'message':
		return Message
	elif object_type == 'conference':
		return Conference
	elif object_type == 'conference_member':
		return ConferenceMember
	elif object_type == 'invite':
		return Invite
	elif object_type == 'role':
		return Role
	elif object_type == 'report':
		return Report
	else:
		raise TypeError('Incorrect object_type')

# End of auto-generated tables

